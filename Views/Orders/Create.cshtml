@model OrderManagementSystem.Models.ViewModels.CreateOrderViewModel
@{
    ViewData["Title"] = "Create Order";
    var products = ViewBag.Products as List<OrderManagementSystem.Models.Entities.Product>;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-10 mx-auto">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-plus-circle"></i> Create New Order</h5>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post" enctype="multipart/form-data" id="orderForm">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

                        <!-- Hidden field for order items JSON -->
                        <input type="hidden" name="OrderItemsJson" id="orderItemsJson" />

                        <!-- Smart Text Input -->
                        <div class="card mb-4 border-info">
                            <div class="card-header bg-info text-white">
                                <i class="bi bi-magic"></i> Quick Entry (Paste Customer Message)
                            </div>
                            <div class="card-body">
                                <textarea id="smartInput" class="form-control" rows="4"
                                          placeholder="Paste customer's message here. Example:&#10;Name: John Doe&#10;Phone: 01712345678&#10;Address: Dhaka, Bangladesh&#10;Product: iPhone 15 Pro&#10;Color: Black&#10;Price: 150000"></textarea>
                                <button type="button" id="extractBtn" class="btn btn-info mt-2">
                                    <i class="bi bi-lightning"></i> Extract Information
                                </button>
                            </div>
                        </div>

                        <!-- Customer Information -->
                        <h6 class="border-bottom pb-2 mb-3">Customer Information</h6>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label asp-for="CustomerName" class="form-label">Customer Name *</label>
                                <input asp-for="CustomerName" class="form-control" id="customerName" />
                                <span asp-validation-for="CustomerName" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="CustomerPhone" class="form-label">Phone Number *</label>
                                <input asp-for="CustomerPhone" class="form-control" id="customerPhone" />
                                <span asp-validation-for="CustomerPhone" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="CustomerAddress" class="form-label">Delivery Address *</label>
                            <textarea asp-for="CustomerAddress" class="form-control" rows="2" id="customerAddress"></textarea>
                            <span asp-validation-for="CustomerAddress" class="text-danger"></span>
                        </div>

                        <!-- Product Information -->
                        <h6 class="border-bottom pb-2 mb-3 mt-4">
                            Product Information
                        </h6>

                        <!-- Product Selection Card -->
                        <div class="card mb-3 border-primary" id="productSelectionCard">
                            <div class="card-body">
                                <div class="row mb-3">
                                    <label class="form-label">
                                        Select Product or Type Manually *
                                        <span class="badge bg-info">Optional: Link to Inventory</span>
                                    </label>

                                    <!-- First Row: Dropdown + Search -->
                                    <div class="col-md-12">
                                        <div class="row g-2">
                                            <!-- g-2 adds spacing between columns -->
                                            <!-- Dropdown -->
                                            <div class="col-md-6">
                                                <select id="productDropdown" class="form-select">
                                                    <option value="">-- Select from list --</option>
                                                    @if (products != null)
                                                    {
                                                        foreach (var product in products.OrderBy(p => p.Name))
                                                        {
                                                            <option value="@product.Id"
                                                                    data-name="@product.Name"
                                                                    data-price="@product.SellingPrice"
                                                                    data-stock="@product.StockQuantity"
                                                                    data-variants="@product.Variants">
                                                                @product.Name - ৳@product.SellingPrice.ToString("N0") (Stock: @product.StockQuantity)
                                                            </option>
                                                        }
                                                    }
                                                </select>
                                            </div>

                                            <!-- Search -->
                                            <div class="col-md-6">
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                                                    <input type="text" id="productSearch" class="form-control" placeholder="Search products..." />
                                                </div>
                                                <div id="searchResults" class="list-group mt-2"
                                                     style="display: none; max-height: 250px; overflow-y: auto; position: absolute; z-index: 1000; width: calc(100% - 30px);">
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Second Row: Product Name + Color -->
                                    <div class="col-md-12 mt-3">
                                        <div class="row g-2">
                                            <!-- Product Name -->
                                            <div class="col-md-6">
                                                <label class="form-label">Product Name *</label>
                                                <input type="text" id="selectedProductName" class="form-control" placeholder="Enter product name manually" />
                                                <input type="hidden" id="selectedProductId" />
                                                <input type="hidden" id="maxStock" value="999999" />
                                                <small class="text-muted" id="stockInfo" style="display: none;">
                                                    Available: <span id="availableStock" class="badge bg-success">0</span>
                                                </small>
                                            </div>

                                            <!-- Color / Variant -->
                                            <div class="col-md-6">
                                                <label class="form-label">Color/Variant</label>
                                                <input type="text" id="selectedProductColor" class="form-control" placeholder="Optional" />
                                            </div>
                                        </div>
                                    </div>
                                </div>


                                <div class="row">
                                    <div class="col-md-3">
                                        <label class="form-label">Quantity *</label>
                                        <input type="number" id="selectedProductQty" class="form-control" value="1" min="1" />
                                        <small class="text-danger" id="qtyError" style="display: none;">Exceeds stock!</small>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Price (৳) *</label>
                                        <input type="number" id="selectedProductPrice" class="form-control" step="0.01" placeholder="0.00" />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">&nbsp;</label>
                                        <button type="button" class="btn btn-primary w-100" id="addToCartBtn">
                                            <i class="bi bi-cart-plus"></i> Add to Order
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Order Items Table -->
                        <div class="card mb-3" id="orderItemsCard" style="display: none;">
                            <div class="card-header bg-light">
                                <strong>Order Items</strong>
                            </div>
                            <div class="card-body p-0">
                                <table class="table table-sm mb-0" id="orderItemsTable">
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>Color/Variant</th>
                                            <th>Quantity</th>
                                            <th>Price</th>
                                            <th>Subtotal</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="orderItemsBody">
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <td colspan="4" class="text-end"><strong>Total:</strong></td>
                                            <td><strong id="orderTotal">৳0</strong></td>
                                            <td></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>

                        <!-- Multiple Screenshots Upload -->
                        <div class="mb-3">
                            <label class="form-label">Screenshots (Optional)</label>
                            <input type="file" name="screenshots" class="form-control" accept="image/*" multiple id="screenshotInput" />
                            <small class="text-muted">You can upload multiple screenshots</small>

                            <!-- Screenshot Preview -->
                            <div id="screenshotPreview" class="mt-3 d-flex flex-wrap gap-2"></div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="OrderNotes" class="form-label">Order Notes (Optional)</label>
                            <textarea asp-for="OrderNotes" class="form-control" rows="2"></textarea>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg" id="submitBtn">
                                <i class="bi bi-check-circle"></i> Create Order
                            </button>
                            <a asp-action="Index" class="btn btn-outline-secondary">
                                <i class="bi bi-x-circle"></i> Cancel
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/4.0.0/jquery.validate.unobtrusive.min.js"></script>

    <script>
        let orderItems = [];

        // Dropdown selection
        $('#productDropdown').change(function() {
            const selected = $(this).find(':selected');

            if (selected.val()) {
                const productId = selected.val();
                const productName = selected.data('name');
                const price = selected.data('price');
                const stock = selected.data('stock');
                const variants = selected.data('variants');

                selectProduct(productId, productName, price, stock, variants);
            } else {
                clearProductSelection();
            }
        });

        // Product search with debounce
        let searchTimeout;
        $('#productSearch').on('input', function() {
            clearTimeout(searchTimeout);
            const term = $(this).val();

            if (term.length < 2) {
                $('#searchResults').hide();
                return;
            }

            searchTimeout = setTimeout(function() {
                $.ajax({
                    url: '@Url.Action("SearchProducts", "Orders")',
                    data: { term: term },
                    success: function(products) {
                        if (products.length > 0) {
                            let html = '';
                            products.forEach(function(product) {
                                const stockClass = product.stock > 5 ? 'success' : (product.stock > 0 ? 'warning' : 'danger');
                                html += `
                                    <button type="button" class="list-group-item list-group-item-action"
                                            onclick="selectProductFromSearch('${product.id}', '${product.name}', ${product.price}, ${product.stock}, '${product.variants || ''}')">
                                        <div class="d-flex justify-content-between">
                                            <div>
                                                <strong>${product.name}</strong>
                                                ${product.variants ? '<br><small class="text-muted">' + product.variants + '</small>' : ''}
                                            </div>
                                            <div class="text-end">
                                                <strong>৳${product.price.toLocaleString()}</strong><br>
                                                <small class="badge bg-${stockClass}">Stock: ${product.stock}</small>
                                            </div>
                                        </div>
                                    </button>
                                `;
                            });
                            $('#searchResults').html(html).show();
                        } else {
                            $('#searchResults').html('<div class="list-group-item text-muted">No products found</div>').show();
                        }
                    }
                });
            }, 300);
        });

        // Select product from search (global function)
        window.selectProductFromSearch = function(id, name, price, stock, variants) {
            selectProduct(id, name, price, stock, variants);
            $('#productSearch').val('');
            $('#searchResults').hide();
        };

        // Common select product function
        function selectProduct(id, name, price, stock, variants) {
            $('#selectedProductId').val(id);
            $('#selectedProductName').val(name);
            $('#selectedProductPrice').val(price);
            $('#maxStock').val(stock);
            $('#availableStock').text(stock);
            $('#stockInfo').show();

            // Set variant if available
            if (variants) {
                const variantArray = variants.split(',');
                if (variantArray.length > 0) {
                    $('#selectedProductColor').val(variantArray[0].trim());
                }
            }

            // Validate quantity
            validateQuantity();

            // Show warning if out of stock
            if (stock < 1) {
                $('#stockInfo').removeClass('text-muted').addClass('text-danger');
                $('#availableStock').removeClass('bg-success').addClass('bg-danger');
                alert('⚠️ Warning: This product is out of stock!');
            } else {
                $('#stockInfo').removeClass('text-danger').addClass('text-muted');
                $('#availableStock').removeClass('bg-danger').addClass('bg-success');
            }
        }

        // Clear product selection
        function clearProductSelection() {
            $('#selectedProductId').val('');
            $('#selectedProductName').val('');
            $('#selectedProductColor').val('');
            $('#selectedProductQty').val(1);
            $('#selectedProductPrice').val('');
            $('#maxStock').val(999999);
            $('#stockInfo').hide();
            $('#qtyError').hide();
        }

        // Validate quantity against stock
        $('#selectedProductQty').on('input', function() {
            validateQuantity();
        });

        function validateQuantity() {
            const qty = parseInt($('#selectedProductQty').val()) || 0;
            const maxStock = parseInt($('#maxStock').val()) || 999999;
            const productId = $('#selectedProductId').val();

            // Only validate if product is selected from inventory
            if (productId && qty > maxStock) {
                $('#qtyError').show();
                $('#addToCartBtn').prop('disabled', true);
                return false;
            } else {
                $('#qtyError').hide();
                $('#addToCartBtn').prop('disabled', false);
                return true;
            }
        }

        // Hide search results when clicking outside
        $(document).click(function(e) {
            if (!$(e.target).closest('#productSearch, #searchResults').length) {
                $('#searchResults').hide();
            }
        });

        // Add product to order
        $('#addToCartBtn').click(function() {
            const productId = $('#selectedProductId').val();
            const productName = $('#selectedProductName').val().trim();
            const productColor = $('#selectedProductColor').val();
            const quantity = parseInt($('#selectedProductQty').val());
            const price = parseFloat($('#selectedProductPrice').val());

            if (!productName || !price || quantity < 1) {
                alert('⚠️ Please fill in Product Name, Quantity, and Price');
                return;
            }

            // Validate quantity if product is from inventory
            if (productId && !validateQuantity()) {
                alert('⚠️ Quantity exceeds available stock!');
                return;
            }

            const item = {
                ProductId: productId || null,
                ProductName: productName,
                ProductColor: productColor || null,
                Quantity: quantity,
                Price: price
            };

            orderItems.push(item);
            updateOrderItemsTable();

            // Clear form
            clearProductSelection();
            $('#productDropdown').val('');
        });

        // Update order items table
        function updateOrderItemsTable() {
            let html = '';
            let total = 0;

            orderItems.forEach(function(item, index) {
                const subtotal = item.Price * item.Quantity;
                total += subtotal;

                html += `
                    <tr>
                        <td>
                            ${item.ProductName}
                            ${item.ProductId ? '<span class="badge bg-success ms-2">Linked</span>' : '<span class="badge bg-secondary ms-2">Manual</span>'}
                        </td>
                        <td>${item.ProductColor || '-'}</td>
                        <td>${item.Quantity}</td>
                        <td>৳${item.Price.toLocaleString('en-BD', {minimumFractionDigits: 2})}</td>
                        <td><strong>৳${subtotal.toLocaleString('en-BD', {minimumFractionDigits: 2})}</strong></td>
                        <td>
                            <button type="button" class="btn btn-sm btn-danger" onclick="removeItem(${index})">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                `;
            });

            $('#orderItemsBody').html(html);
            $('#orderTotal').text('৳' + total.toLocaleString('en-BD', {minimumFractionDigits: 2}));
            $('#orderItemsCard').show();

            // Update hidden field
            $('#orderItemsJson').val(JSON.stringify(orderItems));
        }

        // Remove item from order
        window.removeItem = function(index) {
            if (confirm('Remove this item from order?')) {
                orderItems.splice(index, 1);
                updateOrderItemsTable();

                if (orderItems.length === 0) {
                    $('#orderItemsCard').hide();
                    $('#orderItemsJson').val('');
                }
            }
        };

        // Screenshot preview
        document.getElementById('screenshotInput').addEventListener('change', function(e) {
            const preview = document.getElementById('screenshotPreview');
            preview.innerHTML = '';

            const files = e.target.files;
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                const reader = new FileReader();

                reader.onload = function(e) {
                    const div = document.createElement('div');
                    div.className = 'position-relative';
                    div.innerHTML = `
                        <img src="${e.target.result}" class="img-thumbnail" style="width: 120px; height: 120px; object-fit: cover;">
                        <span class="badge bg-primary position-absolute top-0 start-0 m-1">${i + 1}</span>
                    `;
                    preview.appendChild(div);
                };

                reader.readAsDataURL(file);
            }
        });

        // Form validation
        $('#orderForm').submit(function(e) {
            if (orderItems.length === 0) {
                e.preventDefault();
                alert('⚠️ Please add at least one product to the order');
                return false;
            }
        });



        // Smart text extraction - Enhanced version
        $('#extractBtn').click(function() {
            const text = $('#smartInput').val().trim();

            if (!text) {
                alert('⚠️ Please paste or type customer information first');
                return;
            }

            let extracted = {
                name: null,
                phone: null,
                address: null
            };

            // Split text into lines
            const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);

            // Method 1: Extract with prefixes (original method)
            const nameMatch = text.match(/name[:\s]+([^\n]+)/i);
            if (nameMatch) extracted.name = nameMatch[1].trim();

            const phoneMatch = text.match(/phone[:\s]+(01\d{9}|\+8801\d{9}|8801\d{9})/i);
            if (phoneMatch) extracted.phone = phoneMatch[1].trim();

            const addressMatch = text.match(/address[:\s]+([^\n]+)/i);
            if (addressMatch) extracted.address = addressMatch[1].trim();

            // Method 2: Smart extraction without prefixes
            if (!extracted.name || !extracted.phone || !extracted.address) {
                lines.forEach((line, index) => {
                    // Detect phone number (Bangladesh format)
                    const phonePattern = /(01\d{9}|\+8801\d{9}|8801\d{9})/;
                    const phoneInLine = line.match(phonePattern);

                    if (phoneInLine && !extracted.phone) {
                        extracted.phone = phoneInLine[1];
                        return;
                    }

                    // Detect name (usually first line without phone, and shorter than address)
                    // Name characteristics: 2-50 characters, contains letters, may have spaces
                    const namePattern = /^[a-zA-Z\s\.]{2,50}$/;
                    if (!extracted.name && namePattern.test(line) && line.length < 50 && !phoneInLine) {
                        // Check if it's not an address (addresses usually have more words/numbers)
                        const wordCount = line.split(/\s+/).length;
                        if (wordCount <= 4) { // Names usually have 1-4 words
                            extracted.name = line;
                            return;
                        }
                    }

                    // Detect address (usually longest line, or contains common address keywords)
                    const addressKeywords = ['dhaka', 'road', 'bazar', 'para', 'ganj', 'pur', 'hat', 'bari', 'house', 'flat', 'block', 'sector', 'lane', 'street'];
                    const hasAddressKeyword = addressKeywords.some(keyword => line.toLowerCase().includes(keyword));

                    if (!extracted.address && (hasAddressKeyword || line.length > 15)) {
                        // Make sure it's not a phone number or name
                        if (!phoneInLine && !namePattern.test(line)) {
                            extracted.address = line;
                        }
                    }
                });

                // Fallback: If we have lines but still missing data
                if (lines.length >= 3) {
                    // Assume format: Line 1 = Name, Line 2 = Phone, Line 3+ = Address
                    if (!extracted.name && lines[0]) {
                        const phoneInFirstLine = lines[0].match(/(01\d{9}|\+8801\d{9}|8801\d{9})/);
                        if (!phoneInFirstLine) {
                            extracted.name = lines[0];
                        }
                    }

                    if (!extracted.phone) {
                        // Find first line with phone number
                        for (let i = 0; i < lines.length; i++) {
                            const phoneInLine = lines[i].match(/(01\d{9}|\+8801\d{9}|8801\d{9})/);
                            if (phoneInLine) {
                                extracted.phone = phoneInLine[1];
                                break;
                            }
                        }
                    }

                    if (!extracted.address) {
                        // Find longest line that's not name or phone
                        let longestLine = '';
                        lines.forEach(line => {
                            const hasPhone = line.match(/(01\d{9}|\+8801\d{9}|8801\d{9})/);
                            const isName = (extracted.name && line === extracted.name);

                            if (!hasPhone && !isName && line.length > longestLine.length) {
                                longestLine = line;
                            }
                        });

                        if (longestLine) {
                            extracted.address = longestLine;
                        }
                    }
                } else if (lines.length === 1) {
                    // Single line: try to extract phone, rest could be name or address
                    const singleLinePhone = lines[0].match(/(01\d{9}|\+8801\d{9}|8801\d{9})/);
                    if (singleLinePhone) {
                        extracted.phone = singleLinePhone[1];
                        // Remove phone from line to get remaining text
                        const remaining = lines[0].replace(singleLinePhone[0], '').trim();
                        if (remaining.length > 0) {
                            if (remaining.length < 30) {
                                extracted.name = remaining;
                            } else {
                                extracted.address = remaining;
                            }
                        }
                    }
                }
            }

            // Apply extracted data to form
            let extractedCount = 0;

            if (extracted.name) {
                $('#customerName').val(extracted.name);
                $('#customerName').addClass('border-success');
                setTimeout(() => $('#customerName').removeClass('border-success'), 2000);
                extractedCount++;
            }

            if (extracted.phone) {
                // Clean phone number (remove +88 or 88 prefix if present)
                let cleanPhone = extracted.phone;
                if (cleanPhone.startsWith('+880')) {
                    cleanPhone = '0' + cleanPhone.substring(4);
                } else if (cleanPhone.startsWith('880')) {
                    cleanPhone = '0' + cleanPhone.substring(3);
                }

                $('#customerPhone').val(cleanPhone);
                $('#customerPhone').addClass('border-success');
                setTimeout(() => $('#customerPhone').removeClass('border-success'), 2000);
                extractedCount++;
            }

            if (extracted.address) {
                $('#customerAddress').val(extracted.address);
                $('#customerAddress').addClass('border-success');
                setTimeout(() => $('#customerAddress').removeClass('border-success'), 2000);
                extractedCount++;
            }

            // Show result
            if (extractedCount === 3) {
                showExtractionToast('✅ All information extracted successfully!', 'success');
            } else if (extractedCount > 0) {
                showExtractionToast(`⚠️ Extracted ${extractedCount} field(s). Please fill in the missing information.`, 'warning');
            } else {
                showExtractionToast('❌ Could not extract information. Please enter manually.', 'danger');
            }

            // Show extraction summary
            console.log('Extraction Summary:', extracted);
        });

        // Toast for extraction feedback
        function showExtractionToast(message, type) {
            const bgColor = type === 'success' ? 'bg-success' : (type === 'warning' ? 'bg-warning' : 'bg-danger');
            const toastHtml = `
                <div class="toast align-items-center text-white ${bgColor} border-0" role="alert" style="position: fixed; top: 20px; right: 20px; z-index: 9999;">
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;

            const toastElement = $(toastHtml).appendTo('body');
            const toast = new bootstrap.Toast(toastElement[0], { delay: 3000 });
            toast.show();

            toastElement.on('hidden.bs.toast', function() {
                $(this).remove();
            });
        }
    </script>
}